/*! boxer 22-12-2015 */
var Boxer=Boxer||{};!function(a){"use strict";a.Application=function(a,b){if(this.services=a||{},this.bundles=b||[],this.providerList={},this.callbackList={},b)for(var c=0,d=b.length;d>c;++c)this.addBundle(b);this.services.logger=this.services.logger||{log:function(){}}},a.Application.prototype.addBundle=function(a){a.initProviders(this),a.initEventListeners(this),this.bundles.push(a)},a.Application.prototype.on=function(a,b){this.callbackList[a]||(this.callbackList[a]=[]),this.callbackList[a].push(b)},a.Application.prototype.emit=function(a,b){if(this.services.logger.log("Application.emit()",arguments),b=b||[],this.callbackList[a])for(var c=0,d=this.callbackList[a].length;d>c;++c)this.callbackList[a][c].apply(this,b)},a.Application.prototype.register=function(a,b){this.providerList[a]||(this.providerList[a]=[]),this.providerList[a].push(b);var c=this;return function(a){b.execute(c,a)}},a.Application.prototype.execute=function(a,b){if(this.services.logger.log("Application.execute()",arguments),!this.providerList[a])throw new Error('No provider register for "'+a+'"');for(var c=0,d=this.providerList[a].length;d>c;++c)this.providerList[a][c].execute(this,b)}}(Boxer);var Boxer=Boxer||{};Boxer.GeoJson=Boxer.GeoJson||{},function(a){"use strict";a.GeoJson.GeoCollection=function(){this.type="FeatureCollection",this.features=[]},a.GeoJson.GeoCollection.prototype.add=function(a){this.features.push(a)}}(Boxer);var Boxer=Boxer||{};Boxer.GeoJson=Boxer.GeoJson||{},function(a){"use strict";a.GeoJson.GeoLine=function(a){for(var b=[],c=0,d=a.length;d>c;++c)b.push([a[c].coords.longitude,a[c].coords.latitude]);return{type:"Feature",properties:{},geometry:{type:"Point",coordinates:b}}}}(Boxer);var Boxer=Boxer||{};Boxer.GeoJson=Boxer.GeoJson||{},function(a){"use strict";a.GeoJson.GeoManager=function(a,b){this.sourceManager=a,this.sourceFactory=b},a.GeoJson.GeoManager.prototype.init=function(a,b){this.sourceManager.init(a,this.sourceFactory.createFromGeoJson(b))},a.GeoJson.GeoManager.prototype.refresh=function(a,b){this.sourceManager.refresh(a,this.sourceFactory.createFromGeoJson(b))},a.GeoJson.GeoManager.prototype.put=function(a,b){this.sourceManager.put(a,this.sourceFactory.createFromGeoJson(b))}}(Boxer);var Boxer=Boxer||{};Boxer.GeoJson=Boxer.GeoJson||{},function(a){"use strict";a.GeoJson.GeoPoint=function(a){return{type:"Feature",properties:{},geometry:{type:"Point",coordinates:[a.coords.longitude,a.coords.latitude]}}}}(Boxer);var Boxer=Boxer||{};Boxer.GeoLocation=Boxer.GeoLocation||{},function(a){"use strict";var b=function(a){return{timestamp:a.timestamp,coords:{accuracy:a.coords.accuracy,altitude:a.altitude,altitudeAccuracy:a.altitudeAccuracy,heading:a.heading,latitude:a.coords.latitude,longitude:a.coords.longitude,speed:a.coords.speed}}};a.GeoLocation.WatcherProvider=function(a,b,c){this.navigator=a,this.options=b,this.logger=c||{log:function(){}}},a.GeoLocation.WatcherProvider.prototype.execute=function(a){this.logger.log("WatcherProvider.execute()",arguments);var c=this,d=[],e=!0;a.on("geo.init",function(){e=!1}),c.navigator.geolocation?c.navigator.geolocation.watchPosition(function(f){c.logger.log("geolocation.watchPosition.success",arguments),f=b(f),d.push(f),e&&a.emit("geo.init",[f]),a.emit("geo.success",[f,d])},function(b){c.logger.log("geolocation.watchPosition.error",arguments),a.emit("geo.error",[b])},c.options):c.emit("geo.refusal")}}(Boxer);var Boxer=Boxer||{};Boxer.Helper=Boxer.Helper||{},function(a){"use strict";a.Helper.ObjectStorage=function(a,b){this.storage=a,this.logger=b||{log:function(){}}},a.Helper.ObjectStorage.prototype.getItem=function(a){return this.logger.log("ObjectStorage.getItem()",arguments),JSON.parse(this.storage.getItem(a))},a.Helper.ObjectStorage.prototype.setItem=function(a,b){this.logger.log("ObjectStorage.setItem()",arguments),this.storage.setItem(a,JSON.stringify(b))},a.Helper.ObjectStorage.prototype.removeItem=function(a){this.logger.log("ObjectStorage.removeItem()",arguments),this.storage.removeItem(a)},a.Helper.ObjectStorage.prototype.key=function(a){this.logger.log("ObjectStorage.key()",arguments),this.storage.key(a)},a.Helper.ObjectStorage.prototype.clear=function(){this.logger.log("ObjectStorage.clear()",arguments),this.storage.clear()}}(Boxer);var Boxer=Boxer||{};Boxer.Map=Boxer.Map||{},function(a){"use strict";a.Map.MapFactory=function(a){this.mapboxgl=a},a.Map.MapFactory.prototype.create=function(a){return new this.mapboxgl.Map(a)}}(Boxer);var Boxer=Boxer||{};Boxer.Map=Boxer.Map||{},function(a){"use strict";a.Map.MapManager=function(a,b){this.mapFactory=a,this.logger=b||{log:function(){}},this.map=null,this.callbacks=[]},a.Map.MapManager.prototype.init=function(a){this.logger.log("MapManager.init()",arguments),this.map=this.mapFactory.create(a);var b=this;this.map.on("load",function(){b.logger.log("MapManager: map is loaded");for(var a=0,c=b.callbacks.length;c>a;++a)b.callbacks[a](b.map)})},a.Map.MapManager.prototype.onMapReady=function(a){this.callbacks.push(a)}}(Boxer);var Boxer=Boxer||{};Boxer.Map=Boxer.Map||{},function(a){"use strict";a.Map.MapProvider=function(a,b,c,d){this.mapboxgl=a,this.options=b,this.layers=c,this.logger=d||{log:function(){}}},a.Map.MapProvider.prototype.execute=function(b){console.log("MapProvider.execute()",arguments);var c=this,d=new a.Map.MapManager(new a.Map.MapFactory(this.mapboxgl),this.logger);d.onMapReady(function(e){b.services.map=e,b.services.geoManager=new a.GeoJson.GeoManager(new a.Source.SourceManager(e,c.logger,c.layers),new a.Source.SourceFactory(c.mapboxgl)),b.services.mapManager=d,b.emit("map.ready",[e])}),d.init(this.options)}}(Boxer);var Boxer=Boxer||{};Boxer.Socket=Boxer.Socket||{},function(a){"use strict";a.Socket.SocketProvider=function(a,b,c,d){this.io=a,this.url=b,this.options=c||{},this.events=d||[]},a.Socket.SocketProvider.prototype.execute=function(a){if(!a.services.socket){a.services.socket=this.io.connect(this.url,this.options);for(var b=0,c=this.events.length;c>b;++b){var d=this.events[b];a.services.socket.on(d,function(b){a.emit("socket."+d,[b])})}a.emit("socket.init",[a.services.socket])}}}(Boxer);var Boxer=Boxer||{};Boxer.Source=Boxer.Source||{},function(a){"use strict";a.Source.SourceFactory=function(a){this.mapboxgl=a},a.Source.SourceFactory.prototype.createFromGeoJson=function(a){return new this.mapboxgl.GeoJSONSource({data:a})}}(Boxer);var Boxer=Boxer||{};Boxer.Source=Boxer.Source||{},function(a){"use strict";a.Source.SourceManager=function(a,b,c){this.map=a,this.logger=b||{log:function(){}},this.layers=c||{}},a.Source.SourceManager.prototype.init=function(a,b){this.logger.log("SourceManager.initGeo()",arguments),this.map.addSource(a,b),this.layers[a]&&!this.map.getLayer(a)&&(this.logger.log("SourceManager.addLayers()",arguments),this.map.addLayer(this.layers[a]))},a.Source.SourceManager.prototype.refresh=function(a,b){this.logger.log("SourceManager.resetGeo()",arguments),this.map.getSource(a).setData?this.map.getSource(a).setData(b.data):(this.map.removeSource(a),this.map.addSource(a,b))},a.Source.SourceManager.prototype.put=function(a,b){this.map.getSource(a)?this.refresh(a,b):this.init(a,b)}}(Boxer);