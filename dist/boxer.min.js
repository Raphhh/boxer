/*! boxer 22-12-2015 */
var Boxer=Boxer||{};!function(a){"use strict";a.Application=function(a,b){if(this.services=a||{},this.bundles=b||[],this.providerList={},this.callbackList={},b)for(var c=0,d=b.length;d>c;++c)this.addBundle(b);this.services.logger=this.services.logger||{log:function(){}}},a.Application.prototype.addBundle=function(a){a.initProviders(this),a.initEventListeners(this),this.bundles.push(a)},a.Application.prototype.on=function(a,b){this.callbackList[a]||(this.callbackList[a]=[]),this.callbackList[a].push(b)},a.Application.prototype.emit=function(a,b){if(this.services.logger.log("Application.emit()",arguments),b=b||[],this.callbackList[a])for(var c=0,d=this.callbackList[a].length;d>c;++c)this.callbackList[a][c].apply(this,b)},a.Application.prototype.register=function(a,b){this.providerList[a]||(this.providerList[a]=[]),this.providerList[a].push(b);var c=this;return function(a){b.execute(c,a)}},a.Application.prototype.execute=function(a,b){if(this.services.logger.log("Application.execute()",arguments),!this.providerList[a])throw new Error('No provider register for "'+a+'"');for(var c=0,d=this.providerList[a].length;d>c;++c)this.providerList[a][c].execute(this,b)}}(Boxer);var Boxer=Boxer||{};Boxer.GeoJson=Boxer.GeoJson||{},function(a){"use strict";a.GeoJson.GeoManager=function(a,b){this.sourceManager=a,this.sourceFactory=b},a.GeoJson.GeoManager.prototype.init=function(a,b){this.sourceManager.init(a,this.sourceFactory.createFromGeoJson(b))},a.GeoJson.GeoManager.prototype.refresh=function(a,b){this.sourceManager.refresh(a,this.sourceFactory.createFromGeoJson(b))},a.GeoJson.GeoManager.prototype.put=function(a,b){this.sourceManager.put(a,this.sourceFactory.createFromGeoJson(b))}}(Boxer);var Boxer=Boxer||{};Boxer.Map=Boxer.Map||{},function(a){"use strict";a.Map.MapFactory=function(a){this.mapboxgl=a},a.Map.MapFactory.prototype.create=function(a){return new this.mapboxgl.Map(a)}}(Boxer);var Boxer=Boxer||{};Boxer.Map=Boxer.Map||{},function(a){"use strict";a.Map.MapManager=function(a,b){this.mapFactory=a,this.logger=b||{log:function(){}},this.map=null,this.callbacks=[]},a.Map.MapManager.prototype.init=function(a){this.logger.log("MapManager.init()",arguments),this.map=this.mapFactory.create(a);var b=this;this.map.on("load",function(){b.logger.log("MapManager: map is loaded");for(var a=0,c=b.callbacks.length;c>a;++a)b.callbacks[a](b.map)})},a.Map.MapManager.prototype.onMapReady=function(a){this.callbacks.push(a)}}(Boxer);var Boxer=Boxer||{};Boxer.Map=Boxer.Map||{},function(a){"use strict";a.Map.MapProvider=function(a,b,c,d){this.mapboxgl=a,this.options=b,this.layers=c,this.logger=d||{log:function(){}}},a.Map.MapProvider.prototype.execute=function(b){console.log("MapProvider.execute()",arguments);var c=this,d=new a.Map.MapManager(new a.Map.MapFactory(this.mapboxgl),this.logger);d.onMapReady(function(e){b.services.map=e,b.services.geoManager=new a.GeoJson.GeoManager(new a.Source.SourceManager(e,c.logger,c.layers),new a.Source.SourceFactory(c.mapboxgl)),b.services.mapManager=d,b.emit("map.ready",[e])}),d.init(this.options)}}(Boxer);var Boxer=Boxer||{};Boxer.Source=Boxer.Source||{},function(a){"use strict";a.Source.SourceFactory=function(a){this.mapboxgl=a},a.Source.SourceFactory.prototype.createFromGeoJson=function(a){return new this.mapboxgl.GeoJSONSource({data:a})}}(Boxer);var Boxer=Boxer||{};Boxer.Source=Boxer.Source||{},function(a){"use strict";a.Source.SourceManager=function(a,b,c){this.map=a,this.logger=b||{log:function(){}},this.layers=c||{}},a.Source.SourceManager.prototype.init=function(a,b){this.logger.log("SourceManager.initGeo()",arguments),this.map.addSource(a,b),this.layers[a]&&!this.map.getLayer(a)&&(this.logger.log("SourceManager.addLayers()",arguments),this.map.addLayer(this.layers[a]))},a.Source.SourceManager.prototype.refresh=function(a,b){this.logger.log("SourceManager.resetGeo()",arguments),this.map.getSource(a).setData?this.map.getSource(a).setData(b.data):(this.map.removeSource(a),this.map.addSource(a,b))},a.Source.SourceManager.prototype.put=function(a,b){this.map.getSource(a)?this.refresh(a,b):this.init(a,b)}}(Boxer);